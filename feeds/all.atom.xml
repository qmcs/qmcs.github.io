<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>EECS Society</title><link href="http://eecs.io/" rel="alternate"></link><link href="http://eecs.io/feeds/all.atom.xml" rel="self"></link><id>http://eecs.io/</id><updated>2015-03-10T10:07:00+00:00</updated><entry><title>Python environment for scientific computing</title><link href="http://eecs.io/python-environment-for-scientific-computing.html" rel="alternate"></link><updated>2015-03-10T10:07:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2015-03-10:python-environment-for-scientific-computing.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://conda.pydata.org/miniconda.html"&gt;Miniconda&lt;/a&gt; is a great way to get
working Python environment on variety of operating systems. This tutorial goes
trough the necessary steps to get a Python environment with common scientific
packages.&lt;/p&gt;
&lt;p&gt;Check out &lt;a class="reference external" href="http://holdenweb.blogspot.co.uk/2015/02/how-to-get-bits-of-python-you-need.html"&gt;Steve Holden's video&lt;/a&gt; going trough the same process and his
valuable comments of what's going on.&lt;/p&gt;
&lt;div class="section" id="install-miniconda"&gt;
&lt;h2&gt;Install miniconda&lt;/h2&gt;
&lt;p&gt;Grab miniconda for your platform from the &lt;a class="reference external" href="http://conda.pydata.org/miniconda.html"&gt;project page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Mac OS X or Linux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Download a package for my platform (MacOS X)&lt;/span&gt;
wget http://repo.continuum.io/miniconda/Miniconda3-3.7.0-MacOSX-x86_64.sh

&lt;span class="c"&gt;# Make it executable&lt;/span&gt;
chmod +x Miniconda3-3.7.0-MacOSX-x86_64.sh

&lt;span class="c"&gt;# Run the installer&lt;/span&gt;
./Miniconda3-3.7.0-MacOSX-x86_64.sh
&lt;span class="c"&gt;# Press ENTER to see license agreement.&lt;/span&gt;
&lt;span class="c"&gt;# (Read it) and press `q` to continue&lt;/span&gt;
&lt;span class="c"&gt;# Accept it by typing `yes`.&lt;/span&gt;
&lt;span class="c"&gt;# Note the installation prefix (/Users/dimazest/miniconda3).&lt;/span&gt;
&lt;span class="c"&gt;# I&amp;#39;ve decided *not* to add miniconda install location to my PATH&lt;/span&gt;
&lt;span class="c"&gt;# (to keep it tidy and avoid confusion).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Windows, download a corresponding installer from
&lt;a class="reference external" href="http://conda.pydata.org/miniconda.html"&gt;http://conda.pydata.org/miniconda.html&lt;/a&gt; and run it. It's fine to add Python to
your path on Windows, because the OS doesn't provide it's own Python
installation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prepare-python-environments"&gt;
&lt;h2&gt;Prepare Python environments&lt;/h2&gt;
&lt;p&gt;We might get an outdated version, so it's a good idea to update the installation.&lt;/p&gt;
&lt;p&gt;Mac OS X or Linux:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~/miniconda3/bin/conda update conda
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Windows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;conda update conda
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you noticed, you need to prefix &lt;tt class="docutils literal"&gt;conda&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;~/miniconda3/bin/&lt;/tt&gt; because
it's not in the path on Mac OS X or Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-python-environments"&gt;
&lt;h2&gt;Create Python environments&lt;/h2&gt;
&lt;p&gt;Now we are ready to make an environment. It's a good practice to keep a
dedicated environment per project. Imagine you have to projects, one is a web
project and another is a scientific library. The scientific library doesn't need
to the web stack your web application requires and vice-versa. Also this
prevents versioning conflicts. When one project requires an old version of a
library, and another requires the newest version of the same library.&lt;/p&gt;
&lt;p&gt;These commands create tow virtual environments called &lt;cite&gt;py34&lt;/cite&gt; and &lt;cite&gt;py27&lt;/cite&gt; with a
specific Python version and the packages included in &lt;a class="reference external" href="http://docs.continuum.io/anaconda/pkg-docs.html"&gt;anaconda&lt;/a&gt;. The environment names are
not the best, but they are fine for the demonstration purposes. Prefer to name
environments after the projects they are created for. Prefer to use Python 3,
because it's the current version of Python. Use Python 2 only if you have to
deal with &lt;a class="reference external" href="https://caniusepython3.com/"&gt;software&lt;/a&gt; that is &lt;a class="reference external" href="http://py3readiness.org/"&gt;not compatible with
Python 3&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~/miniconda3/bin/conda create -n py34 anaconda &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3.4  &lt;span class="c"&gt;# Python 3.4&lt;/span&gt;
~/miniconda3/bin/conda create -n py27 anaconda &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2.7  &lt;span class="c"&gt;# Optionally, Python 2.7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Activate one of them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Mac or Linux&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; ~/miniconda3/bin/activate py34
&lt;span class="c"&gt;# Windows&lt;/span&gt;
&lt;span class="nb"&gt;source &lt;/span&gt;activate py34
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you are ready to run &lt;a class="reference external" href="http://ipython.org/notebook.html"&gt;IPython Notebook&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ipython notebook
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="python"></category></entry><entry><title>Alexandre González</title><link href="http://eecs.io/alexandre-gonzalez.html" rel="alternate"></link><updated>2015-03-09T00:00:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2015-03-09:alexandre-gonzalez.html</id><summary type="html">&lt;h2&gt;Who are you and what are you doing?&lt;/h2&gt;
&lt;p&gt;My name is Álex González (&lt;a href="http://twitter.com/agonzalezro"&gt;@agonzalezro&lt;/a&gt; on
twitter) and what I do in my day to day basis is programming in
&lt;a href="https://golang.org/"&gt;Go&lt;/a&gt; and &lt;a href="http://rubyonrails.org/"&gt;RoR&lt;/a&gt; (mainly Go) plus some
devops work.&lt;/p&gt;
&lt;p&gt;I am currently working at &lt;a href="http://shopa.com"&gt;Shopa&lt;/a&gt; which is "where shopping
gets social, connecting retailers with customers through the power of
recommendation" (see &lt;a href="http://techcrunch.com/2015/02/17/social-shopping-app-shopa-secures-11m-series-a-to-scale-internationally/"&gt;an article on Techcrunch&lt;/a&gt;
about us) which mainly means that we give you money if you refer people to buy
products that we have in catalog. It's quite cool that you can create and share
your own collections though, if you are into the fashion world, you must try it.
And if you are not, too.&lt;/p&gt;
&lt;h2&gt;What do you expect from a recent graduate to become a successful member of your team?&lt;/h2&gt;
&lt;p&gt;Mainly attitude. If you are a recent graduate I don't expect you to be a crack.
I hate when somebody tries to show me that they know stuff about something that
they really don't know. Don't be that person!&lt;/p&gt;
&lt;p&gt;You will be at the beginning of your practical learning process and, as I said,
your attitude is the most important.&lt;/p&gt;
&lt;p&gt;Anyway, I know what this question is about and I will recommend you few things
to check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;any kind of control version system, you can start with
  &lt;a href="http://git-scm.com/"&gt;git&lt;/a&gt;. It's cool to name your projects: &lt;code&gt;_final&lt;/code&gt;,
  &lt;code&gt;_final_final&lt;/code&gt;, &lt;code&gt;_final_v2_this_time_is_true&lt;/code&gt;; but trust me, it stops being fun
  with the time. I would like that somebody explained me that at the first year
  of the university.&lt;/li&gt;
&lt;li&gt;learn some language that is not covered at the university. I am pretty sure that
  some of your teachers told you: if you know how to develop on X, you know how
  to develop on Y, but... this sentence have some caveats. My recommendations
  (not subjective at all) are Go and &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;master your editor, whatever it is, this is not a war between
  &lt;a href="http://www.vim.org/"&gt;vim&lt;/a&gt; and &lt;a href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;do you know what is unit testing? You should start learning it and it will
  help you A LOT now and in the future.&lt;/li&gt;
&lt;li&gt;we have &lt;a href="http://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORMs&lt;/a&gt; that
  makes the data layers of your programs extremely simple, but knowing some
  &lt;a href="http://en.wikipedia.org/wiki/SQL"&gt;SQL&lt;/a&gt; to understand what those ORMs do in the
  background would be helpful.&lt;/li&gt;
&lt;li&gt;learning some &lt;a href="http://en.wikipedia.org/wiki/NoSQL"&gt;NoSQL&lt;/a&gt; as well will be a
  good addition to your toolbox.&lt;/li&gt;
&lt;li&gt;grab some Open Source project that you like and try to understand its
  internals. This will help you to get comfortable reading others people source
  code which is going to be extremely useful in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am pretty sure that I am missing some important point, the points I mentioned
require quite a lot of time to master. If you finish them all, feel free to ask
me where to do further.&lt;/p&gt;
&lt;h2&gt;How did you learn programming?&lt;/h2&gt;
&lt;p&gt;My dad had some &lt;a href="http://en.wikipedia.org/wiki/Amstrad_CPC"&gt;Amstrad CPC&lt;/a&gt;
magazines explaining the basics of Basic around the house so I got interested
about knowing what were those weird characters in the magazine.&lt;/p&gt;
&lt;p&gt;With the age of ~14(?) I made my first program. My father is an electrician and
he had a book explaining the number of heaters needed by a house depending
where they live, size of the house, etc... I made it with Basic by
copy/pasting (back then, I didn't even know what a function was). When I
finished it, I had the first bad experience with programming: I was a so-so
result of what I achieved, but my father asked me "where are the icons?". So,
in that exact point I realised that 1) UI is important &amp;amp; 2) nobody cares about
the details of what you have done, they want the beautiful chassis and that it
starts when you turn the key.&lt;/p&gt;</summary><category term="interview"></category><category term="go"></category><category term="python"></category><category term="git"></category></entry><entry><title>Trip to Bletchley park</title><link href="http://eecs.io/trip-to-bletchley-park.html" rel="alternate"></link><updated>2014-11-10T11:04:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-11-10:trip-to-bletchley-park.html</id><summary type="html">&lt;p&gt;The EECS society will be making its 3rd annual visit on the &lt;strong&gt;29th of November&lt;/strong&gt;
to Bletchley park (home of the code breakers) and the national museum of
computing, where the first programmable computer (Colossus) was renovated.&lt;/p&gt;
&lt;p&gt;Bletchley park is also a war museum and a part of British heritage so well worth
a visit. The school offers a big discount on the overall visit and is limited to
the coach size of 49 (so be quick!). The society does this trip every year as a
part remembrance to the war heroes of Bletchley and of course to the roots of
our discipline in EECS (birth place of the computer and that Colossus was made
by an Electronic Engineer).&lt;/p&gt;
&lt;p&gt;If you want to join, send an email to &lt;a class="reference external" href="mailto:epp-organisers&amp;#64;eecs.qmul.ac.uk"&gt;epp-organisers&amp;#64;eecs.qmul.ac.uk&lt;/a&gt;.&lt;/p&gt;
</summary><category term="trip"></category></entry><entry><title>Robocode</title><link href="http://eecs.io/robocode.html" rel="alternate"></link><updated>2014-10-12T00:00:00+01:00</updated><author><name>René Birkeland</name></author><id>tag:eecs.io,2014-10-12:robocode.html</id><summary type="html">&lt;p&gt;Robocode is a simple robot simulator, designed to give insight into how programming works. A simple robot can be written in just a few minutes - but perfecting a bot can take months. The robots will enter the battlefield and fight to the death.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;How to install&lt;/h2&gt;
&lt;p&gt;Robocode is written in Java, and can easily be installed simply by running the &lt;strong&gt;.jar file&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="http://sourceforge.net/projects/robocode/files/robocode/1.9.2.3/"&gt;this link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;robocode-1.9.2.3-setup.jar&lt;/strong&gt; and save it somewhere you can easily find it, like your desktop.&lt;/li&gt;
&lt;li&gt;Run the file, and follow the instruction. Install it somewhere you will remember (you will need to know later).&lt;/li&gt;
&lt;li&gt;After completion, you will have a desktop icon, double click it to run Robocode.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Get familiar&lt;/h2&gt;
&lt;p&gt;To get a feeling how Robocode works, let's do a quick demonstration how the robots act.&lt;/p&gt;
&lt;p&gt;Start by clicking &lt;strong&gt;Battle&lt;/strong&gt; in the top menu, and choose &lt;strong&gt;New&lt;/strong&gt;. Here you will see a list of sample robots. By looking at the names, you might be able to guess how to robots will act. Pick 3-5 different ones you like, by selecting one and clicking &lt;strong&gt;Add&lt;/strong&gt;. You can also remove robots that are selected by pressing &lt;strong&gt;Remove&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When you've selected your desired contestants. Click &lt;strong&gt;Start Battle&lt;/strong&gt; to begin.&lt;/p&gt;
&lt;p&gt;The robots will start to fight. In the window you will have several buttons and sliders. In the left bottom corner you find your typical &lt;strong&gt;Start/Stop/Pause&lt;/strong&gt; functionality among others. On the bottom of the screen you will have a slider to control the speed of the match.&lt;/p&gt;
&lt;p&gt;A match consists of 10 rounds, and the robots gather points based on how well they do. The total score is calculated from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How long it survives.&lt;/li&gt;
&lt;li&gt;How much damage it deals to other robots (bullets or ramming).&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The best robot is not necessarily the last one standing. Find the perfect balance between surviving, and dealing damage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spend some time testing the different sample robots, gather ideas on how you want your robot to work.&lt;/p&gt;
&lt;h2&gt;Make your own robot&lt;/h2&gt;
&lt;p&gt;Now that you have seen how Robocode works, it's time to make your own!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click on &lt;strong&gt;Robot&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Source Editor&lt;/strong&gt; to open the editor.&lt;/li&gt;
&lt;li&gt;To make a new robot simply click &lt;strong&gt;File&lt;/strong&gt; -&amp;gt; &lt;strong&gt;New&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Robot&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Give your robot a good name.&lt;/li&gt;
&lt;li&gt;Use your team's name package name&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will now be presented with the editor. It has already some code in it to give you a start. Take a look through it, and make sure to read the comments, they have a lot of useful information.&lt;/p&gt;
&lt;p&gt;Lets go through the most important methods.&lt;/p&gt;
&lt;h3&gt;Methods&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the main method. This is were the majority of your robots behavior is defined. It should have a while-loop that continues to run forever, for example by using &lt;strong&gt;while(true)&lt;/strong&gt;, like in the example code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
A while-loop is a loop that will run as long as the statement between the brackets is true. If you put &lt;strong&gt;true&lt;/strong&gt;, it will run forever. If you put &lt;strong&gt;i &amp;lt; 2&lt;/strong&gt;, it will only run as long as the variable &lt;strong&gt;i&lt;/strong&gt; is less than 2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What you write before the while-loop will only get executed once. Here you can have your initialization of your robot. You can change the color of the robot, set a starting position of the gun, or get information about the battlefield size and heading (this is more complicated).&lt;/p&gt;
&lt;p&gt;Inside the while-loop you will write the algorithm that control your robot. Don't be intimated by the word algorithm, no prior knowledge is needed. By looking at the example code you can see some simple examples.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ahead(100);&lt;/strong&gt; will move the robot 100 pixels forward.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;turnGunRight(360);&lt;/strong&gt; turns the gun 360 degrees, a full resolution.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;back(100);&lt;/strong&gt;  will move the robot 100 pixels backwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 
You choose the values, depending how much you want to move or turn. They are not set in stone.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can put as many lines as you want in the loop, but remember the loop will be repeated infinitely. It does not need to be very long to be effective.&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onScannedRobot&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScannedRobotEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This method will automatically get called if another robot is scanned. This method is called automatically by the game, as long as the robot is moving, turning its body, turning its gun, or turning its radar.&lt;/p&gt;
&lt;p&gt;Here you write what you want to happen when a robot is scanned. Will you fire or retreat?&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onHitByBullet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HitByBulletEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This get executed if you get hit. Is this the time to run away or fire all your guns?&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onHitWall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HitWallEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This get executed if you hit a wall. You know at this point you can't go any further, maybe it's best to back up, or turn 90 degrees to get away.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Save &amp;amp; Compile&lt;/h3&gt;
&lt;p&gt;While designing it's smart to save your project to avoid loosing your work in case something goes wrong. When you have designed your robot, it's time to save and compile.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
The compiler is what translates the code from a language we can understand (Latin alphabet), into a language the computer understands (binary, 0 and 1).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Simply press &lt;strong&gt;Compiler&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Compile&lt;/strong&gt;, or press &lt;strong&gt;ctrl+B&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;After its compiled it's ready to see what you have made. Go back to the &lt;strong&gt;Robocode window&lt;/strong&gt;, and start a new match like we did before, &lt;strong&gt;Battle&lt;/strong&gt; -&amp;gt; &lt;strong&gt;New&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You will now see that your robot is in the list of robots. Add it, and maybe a few opponents to see how it works.&lt;/p&gt;
&lt;p&gt;After testing it you might figure out that it does not work like you first intended, or you have come up with new improvements. In that case, go back to the editor and change your code again until you're happy wit the result. &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Where can I find more methods and commands?&lt;/h2&gt;
&lt;p&gt;Robocode has a bunch of built in methods and commands you can use to control your robot. So far we have only touched a few very basic ones. If you want to read more on how these method work or need to look up how to do certain things, take a look at these sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://robocode.sourceforge.net/docs/robocode/"&gt;Robot Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://robowiki.net/wiki/Robocode"&gt;Robocode Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;Fight in the tournament (Robocode event)&lt;/h2&gt;
&lt;p&gt;When the time is up, you will have to deliver your robot. Remember it needs to be compiled!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To find it, locate the folder &lt;strong&gt;"Robocode"&lt;/strong&gt; where you installed robocode.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;strong&gt;Robots&lt;/strong&gt; and find the folder &lt;strong&gt;"your team's name"&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Make a copy of it and put it on your desktop.&lt;/li&gt;
&lt;li&gt;Make sure it only contains the robot you want to submit, only 1 robot per team.&lt;/li&gt;
&lt;li&gt;It &lt;strong&gt;must&lt;/strong&gt; contain &lt;strong&gt;yourRobot.java&lt;/strong&gt; and &lt;strong&gt;yourRobot.class&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;We will pass around USB sticks, put the folder onto it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Good luck!&lt;/p&gt;</summary><category term="Robocode"></category><category term="Tutorial"></category></entry><entry><title>Meet and Greet</title><link href="http://eecs.io/meet-and-greet.html" rel="alternate"></link><updated>2014-10-09T23:00:00+01:00</updated><author><name>Henrik O. Skogmo</name></author><id>tag:eecs.io,2014-10-09:meet-and-greet.html</id><summary type="html">&lt;p&gt;To celebrate our very first socity meeting we gave free drinks and pizza to all
attendees. We got to know some really cool people, and a lot of you were 1st
Year students. We welcome you to our great campus!&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;It is a tradition for all societies to have a meet and greet event in the start
of the year. But this was not only a meet and greet for us. This was our very
first official meeting. And seeing it go so well and to have students we have
never met before walk in that door and say they are here for the EECS Society
makes me proud. I am glad to see that there are other students that want a
society like this one.&lt;/p&gt;
&lt;p&gt;We want to create an awesome community where we all can have fun and learn from
each other. To do so we need to talk to you to know what you guys want. And that
was what this evening was all about.&lt;/p&gt;
&lt;p&gt;We are planning a programming competition for our next event. If you have ever
heard about &lt;a class="reference external" href="http://robocode.sourceforge.net/"&gt;Robocode&lt;/a&gt;, then you might take a look into it ;)&lt;/p&gt;
&lt;p&gt;Thanks everyone for showing up! Follow our &lt;a class="reference external" href="http://twitter.com/eecssoc"&gt;Twitter&lt;/a&gt; and &lt;a class="reference external" href="http://facebook.com/groups/eecssoc"&gt;Facebook&lt;/a&gt; for more
information about events and the society.&lt;/p&gt;
&lt;p&gt;You can contribute with technical articles in our &lt;a class="reference external" href="https://github.com/qmcs/qmcs.github.io"&gt;GitHub&lt;/a&gt; repo. We have made a
guide there for you to follow. Also you can check the &lt;a class="reference external" href="https://github.com/qmcs/qmcs.github.io/issues"&gt;issues&lt;/a&gt; section to read
and comment on projects and events for consideration.&lt;/p&gt;
</summary><category term="social"></category><category term="meeting"></category></entry><entry><title>The UK/IE Programming Contest</title><link href="http://eecs.io/the-ukie-programming-contest.html" rel="alternate"></link><updated>2014-09-24T16:22:00+01:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-09-24:the-ukie-programming-contest.html</id><summary type="html">&lt;p&gt;On Oct 4th, the ACM UK/IE Programming Contest, part of the ACM ICPC, will have
its second distributed annual event in several locations across the UK and
Ireland. This year sponsored by Google, Paypal &amp;amp; EF.&lt;/p&gt;
&lt;p&gt;The contest (which runs from 10  a.m. to 3p.m.) is a UK/IE preliminary event,
for NWERC - the NorthWestern European Regional Contest, which is a  preliminary
to the world final.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ukiepc.nwerc.eu"&gt;http://ukiepc.nwerc.eu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://nwerc.eu"&gt;http://nwerc.eu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://icpc.baylor.edu/"&gt;http://icpc.baylor.edu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Undergraduate students take part in teams of 3, trying to solve around 10
problems using 1 computer in 5 hours, with no internet access. These
problems are solved by finding the most relevant and optimal algorithm for
a solution. Solutions are submitted to an automatic judge, that runs the
code, and compares the result with an official expected output.&lt;/p&gt;
&lt;p&gt;This year, the contest has 3 sponsors: Google, Paypal, &amp;amp; EF&lt;/p&gt;
&lt;div class="section" id="prizes"&gt;
&lt;h2&gt;Prizes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;all contestants will get a free contest T-Shirt (with thanks to Google),&lt;/li&gt;
&lt;li&gt;the top 5 teams in the UK &amp;amp; Ireland win Leap Motions (thanks to Paypal)&lt;/li&gt;
&lt;li&gt;the top team at Nott, Bath &amp;amp; Imperial win £50pp (with thanks to EF)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="more-information"&gt;
&lt;h2&gt;More information&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ukiepc.nwerc.eu/2014"&gt;Home page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://icpc.baylor.edu/regionals/finder/ukiepc-2014"&gt;Registration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ukiepc.nwerc.eu/2013"&gt;Last year’s event&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://plus.google.com/u/1/events/gallery/c6u8t0ro5lp2c2j1m8qk7tbn2gc"&gt;Photos of 2013&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="taking-part"&gt;
&lt;h2&gt;Taking part&lt;/h2&gt;
&lt;p&gt;In case you are interested, Queen Mary can host the competition. Please contact
Dmitrijs Milajevs &amp;lt;&lt;a class="reference external" href="mailto:d.milajevs&amp;#64;qmul.ac.uk"&gt;d.milajevs&amp;#64;qmul.ac.uk&lt;/a&gt;&amp;gt; to get more information.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="competition"></category></entry><entry><title>The problem of Scaling</title><link href="http://eecs.io/the-problem-of-scaling.html" rel="alternate"></link><updated>2014-09-12T00:00:00+01:00</updated><author><name>Filip Ter</name></author><id>tag:eecs.io,2014-09-12:the-problem-of-scaling.html</id><summary type="html">&lt;p&gt;Scaling of applications is a common problem that many programmers have to deal with. Just because a solution works on a given input; doesn't mean it's going to work,with satisfactory performance, for input of any size. The same algorithm that sorts 100 integers quickly, might scale so badly that if given a 1,000,000 integers it might be so slow that it would become practically useless, or at least a big drawback to the application it's used in. Given this fact, one has to be aware on what scale their algorithms and programs will be used.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;For example, consider the following function, which implements an algorithm from the book &lt;em&gt;Algorithms&lt;/em&gt;&lt;a href="#book"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;a id="book_back"&gt;&lt;/a&gt;, for calculating the nth Fibbonacci's number(using Python):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This algorithm does the job but it has two recursive invocations for every &lt;code&gt;n &amp;gt; 2&lt;/code&gt;, this is really going to stack up as &lt;code&gt;n&lt;/code&gt; gets large, and the runtime of the algorithm will grow exponentially. To show this experimentally, the function was executed and timed for the 10th, 20th, 30th, and 40th Fibonacci numbers. This was done with a script&lt;a href="#timing"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;a id="timig_back"&gt;&lt;/a&gt; using the python &lt;code&gt;timeit&lt;/code&gt; module. Each case was carried out 5 times and the average was taken, see the table below:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th colspan="4" align="center"&gt;Seconds taken to find the nth Fibonacci number&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Algorithm&lt;/th&gt;&lt;th&gt;n = 10&lt;/th&gt;&lt;th&gt;n = 20&lt;/th&gt;&lt;th&gt;n = 30&lt;/th&gt;&lt;th&gt;n = 40&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;fib1&lt;/td&gt;&lt;td&gt;0.0&lt;/td&gt;&lt;td&gt;0.0023&lt;/td&gt;&lt;td&gt;0.2874&lt;/td&gt;&lt;td&gt;35.33&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The algorithm is so inefficient that practically, it can only be used for very small numbers of &lt;code&gt;n&lt;/code&gt;. Thankfully there are more efficient solutions such as the one below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the obvious improvement is that the function actually stores the two previous values, so there is no need to recursively find every value below &lt;code&gt;n&lt;/code&gt;, which is a massive performance benefit. With this algorithm it is possible to calculate values that would take years with the previous one to compute. See below the results of the same test as before, except with &lt;code&gt;fib2&lt;/code&gt; and much larger input:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th colspan="4" align="center"&gt;Seconds taken to find the nth Fibonacci number&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;Algorithm&lt;/th&gt;&lt;th&gt;n = 10,000&lt;/th&gt;&lt;th&gt;n = 20,000&lt;/th&gt;&lt;th&gt;n = 30,000&lt;/th&gt;&lt;th&gt;n = 40,000&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;fib2&lt;/td&gt;&lt;td&gt;0.0018&lt;/td&gt;&lt;td&gt;0.0057&lt;/td&gt;&lt;td&gt;0.0112&lt;/td&gt;&lt;td&gt;0.0187&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;It's obvious that the second algorithm is on a completely different level, it would be meaningless to even try to compute the values in the second table with the first algorithm. &lt;/p&gt;
&lt;p&gt;Even an example as trivial as this illustrates the significance of knowing how an algorithm scales, as it places limits on how an algorithm can be used. Python was chosen for this test, because it natively supports arbitrarily large numbers so the algorithm would produce genuine results. It should be noted that this has a drawback, since for significantly larger values of &lt;code&gt;n&lt;/code&gt; the result will get so large that storing the variables in the function will actually slow down the whole process.&lt;/p&gt;
&lt;p&gt;Another of many cases where scaling is relevant is the experiment in my previous article about using the Quicksort algorithm to compare different languages(C&lt;a href="#c"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;a id="c_back"&gt;&lt;/a&gt;, C++&lt;a href="#cpp"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;a id="cpp_back"&gt;&lt;/a&gt;, Java&lt;a href="#java"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;a id="java_back"&gt;&lt;/a&gt;, Python 3&lt;a href="#py"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;a id="py_back"&gt;&lt;/a&gt;, Python with PyPy&lt;a href="#py"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;a id="py_back"&gt;&lt;/a&gt;, Jython&lt;a href="#py"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;a id="py_back"&gt;&lt;/a&gt;, and PHP&lt;a href="#php"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;a id="php_back"&gt;&lt;/a&gt;). This comparison can now be taken a step further, by examining how well the different languages scale. The average case complexity of quicksort is: &lt;code&gt;O(n * log(n))&lt;/code&gt;, this means the theoretical runtime of the algorithm given &lt;code&gt;n&lt;/code&gt; integers is &lt;code&gt;n*log(n)&lt;/code&gt;. Knowing this, it is possible to take the data from the test that was performed in the last article, and compare the run-times of each language with the theoretical runtime obtained by the equation for the complexity. This will give deeper insight into the performance of each language, as opposed to just observing the runtime itself.&lt;/p&gt;
&lt;p&gt;Below is a graph showing the theoretical runtime (&lt;code&gt;n*log(n)&lt;/code&gt;) divided by the actual runtime:&lt;/p&gt;
&lt;p&gt;&lt;img alt="&amp;quot;Quicksort log-plot for acutal runtime /nlogn&amp;quot;" src="static/images/qsLogPlot.png" title="Qsort Log Plot" /&gt;&lt;/p&gt;
&lt;p&gt;Jython was omitted from this graph as it's performance is so bad that it would skew the graph and make the other results hardly readable. &lt;/p&gt;
&lt;p&gt;The curves on this graph could loosely be classified into three groups. The first is the compiled languages, the group that contains C, and C++. These languages perform very well and their ratio of runtime to theoretical runtime, decreases very slightly with more integers, but compared to the others it seems almost constant. The second group(PyPy and Java) start off with a much higher ratio, but as the number of integers increases the graphs for both of these decrease quickly. In the final group are the interpreters, which perform badly to start with, however unlike the rest they actually get worse as the input grows.&lt;/p&gt;
&lt;p&gt;In these results what is particularly noteworthy is the way the graphs of PyPy and Java sharply decrease, whereas the other languages get worse and C/C++ decrease very slowly, if at all. The reason for this, is that PyPy and Java both use JIT(Just In Time) compilation, as mentioned last time. JIT is a kind of compilation that occurs at run time, as the program is running the JIT compiler will compile and optimize parts of the code when they are needed by the running program. So in the beginning PyPy and Java don't perform so well, as the number of integers is small and there is barely any time for JIT to make any difference, but as the number of integers increases the JIT compilation kicks in and this leads to a dramatic performance improvement. Consequently this can be seen in the graphs, of course it still doesn't make them as fast as C/C++ which compile everything to machine code in the beginning, but it makes them scale very well, note the difference between PyPy and CPython 3. &lt;/p&gt;
&lt;p&gt;This test demonstrates that there are not only differences in how algorithms scale, but even languages themselves. Therefore it can also play a role in deciding which language to use, as a particular language might scale badly for a large number of input. The aim of this article is to illustrate that it's best to make pragmatic choices about which language and/or algorithm to use. This is of course not to say that only the best scaling solution should be chosen all the time, rather the one that best meets the needs of the designer. For example if a programmer uses quick sort and knows the input will never exceed 10,000 then they don't need to worry how the implementation scales beyond that, and may focus on other considerations such as ease of implementation, etc. The point is one needs to be aware of how they need their application to scale, since this will help determine which kinds of solutions are suitable. As per the Quick Sort example, if you want to sort 1000 integers it's fine to use PHP, but if you want to sort 100 million, and not wait for half an hour, you should probably use a compiled/JIT language. Being aware of this can save a developer a lot of work later, as they won't find in the middle of a project that it must be rewritten, because it performs poorly on a scale not previously tested.&lt;/p&gt;
&lt;h4&gt;Footnotes&lt;/h4&gt;
&lt;p&gt;&lt;a id="book"&gt;1&lt;/a&gt;:Dasgupta, Sanjoy, Christos H. Papadimitriou, and Umesh Virkumar. Vazirani. "Enter Fibonacci." Algorithms. Boston: McGraw-Hill Higher Education, 2008. 2-4. Print. &lt;a href="#book_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="timing"&gt;2&lt;/a&gt;:Script used to time fibonacci functions: &lt;a href="https://github.com/Filip-Ter/qmcs.articles.res/blob/master/018-scaling/TimeFib.py"&gt;https://github.com/Filip-Ter/qmcs.articles.res/blob/master/018-scaling/TimeFib.py&lt;/a&gt; &lt;a href="#timing_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="c"&gt;3&lt;/a&gt;: My C implementation of Quicksort (compiled with gcc): &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/QsortC.c"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/QsortC.c&lt;/a&gt; &lt;a href="#c_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="cpp"&gt;4&lt;/a&gt;: My C++ Quicksort implementation (compiled with g++): &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src//Qsort.cc"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src//Qsort.cc&lt;/a&gt; &lt;a href="#cpp_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="java"&gt;5&lt;/a&gt;: My Java Quicksort implementation, complied and executed with jdk 7u51: &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.java"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.java&lt;/a&gt; &lt;a href="#java_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="py"&gt;6&lt;/a&gt;: My Python Quicksort implementation, the same source file was used for Python 3.3.4, PyPy, and Jython: &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.py"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.py&lt;/a&gt; &lt;a href="#py_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="php"&gt;7&lt;/a&gt;: My PHP Quicksort implementation: &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.php"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.php&lt;/a&gt; &lt;a href="#php_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;</summary><category term="Algorithms"></category><category term="Fibonacci"></category><category term="Quicksort"></category><category term="languages"></category><category term="speed"></category><category term="scaling"></category></entry><entry><title>Comparing Languages with Quicksort</title><link href="http://eecs.io/comparing-languages-with-quicksort.html" rel="alternate"></link><updated>2014-04-20T00:00:00+01:00</updated><author><name>Filip Ter</name></author><id>tag:eecs.io,2014-04-20:comparing-languages-with-quicksort.html</id><summary type="html">&lt;p&gt;Language speed is often a major factor when determining how useful a programming language can be. Some applications rely on languages that can execute a large amount of instructions in a short amount of time, and programmers may in some cases use languages which have many unpleasant features, just because they can execute an algorithm faster. It would be interesting to see how some languages would fare when it comes to how long it takes them to execute the same algorithm. &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I decided to conduct a comparison of programming languages by using them to implement practically the same task and then timing how long each one would take to execute. For the purposes of this article, a faster program is one which can execute an implementation of an algorithm in less time. The algorithm used was quicksort, which is a well-known sorting algorithm invented by Tony Hoare in 1961.&lt;a href="#thoare"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;a id="thoare_back"&gt;&lt;/a&gt; It can be implemented recursively, and it works by finding a pivot value in an array, moving all elements smaller than it to one side and the larger ones to the other, this process is repeated on the sub-sections around the pivot until the whole array is sorted.&lt;/p&gt;
&lt;p&gt;Following up from my previous article, I thought of using the Mersenne Twister&lt;a href="#mt"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;a id="mt_back"&gt;&lt;/a&gt; algorithm to generate random 32bit integers that I would then sort using quicksort in 7 different implementations, specifically: C&lt;a href="#c"&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&lt;a id="c_back"&gt;&lt;/a&gt;, C++&lt;a href="#cpp"&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;a id="cpp_back"&gt;&lt;/a&gt;, Java&lt;a href="#java"&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;&lt;a id="java_back"&gt;&lt;/a&gt;, Python 3&lt;a href="#py"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;a id="py_back"&gt;&lt;/a&gt;, Python with PyPy&lt;a href="#py"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;a id="py_back"&gt;&lt;/a&gt;, Jython&lt;a href="#py"&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;&lt;a id="py_back"&gt;&lt;/a&gt;, and PHP&lt;a href="#php"&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;&lt;a id="php_back"&gt;&lt;/a&gt;. For the quicksort algorithm, I found a pseudo-code description of it on Wikipedia&lt;a href="#wiki"&gt;&lt;sup&gt;8&lt;/sup&gt;&lt;/a&gt;&lt;a id="wiki_back"&gt;&lt;/a&gt;. Using a Java implementation of Mersenne Twister&lt;a href="#mtjava"&gt;&lt;sup&gt;9&lt;/sup&gt;&lt;/a&gt;&lt;a id="mtjava_back"&gt;&lt;/a&gt;, I generated 7 files all containing pseudo-random positive 32-bit integers. The files contained 100 to 100 million integers, with each file containing 10 times as many integers as the previous one. Using the description from Wikipedia, I then implemented the algorithm in the languages used in the test, adding functions for reading the numbers from files and printing them for checking.  In the actual test each program was to read the contents of the file, store them in an array, sort the array using quicksort, and finally print a message that the array was sorted. The time of execution would be measured by the Bash time function.&lt;a href="#bashtime"&gt;&lt;sup&gt;10&lt;/sup&gt;&lt;/a&gt;&lt;a id="bashtime_back"&gt;&lt;/a&gt; This was mainly done so that the same function would be measuring all programs, as using timing from different languages can produce unreliable results. In order to obtain more precise results each instance of sorting was done 5 times, and the average time was taken. In an effort to automate the task more, I wrote a Bash script that would run each instance of the program 5 times, time the execution for each run, and then calculate the average of the times and write it to a CSV table.&lt;a href="#bashscript"&gt;&lt;sup&gt;11&lt;/sup&gt;&lt;/a&gt;&lt;a id="bashscript_back"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As for my initial expectations, they coincided with the usual belief about these languages. I expected the compiled languages(C, C++, Java) to be fast, and the interpreted languages to be slower. This basically follows common knowledge about these languages, but the point of the test is to see how they would actually compare, and how significant the differences would be. When it comes to the Python variants I thought that PyPy would be the fastest out of them as it was designed specifically to make python code run faster, and uses just-in-time(jit) compilation. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The table which contains the average times for all runs of each program, on the five largest files.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;&lt;/th&gt;
            &lt;th colspan="5" align="center"&gt;Seconds taken to sort array&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;Language&lt;/th&gt;
            &lt;th&gt;10^4 integers&lt;/th&gt;
            &lt;th&gt;10^5 integers&lt;/th&gt;
            &lt;th&gt;10^6 integers&lt;/th&gt;
            &lt;th&gt;10^7 integers&lt;/th&gt;
            &lt;th&gt;10^8 integers&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt; 
&lt;tr&gt;&lt;td&gt;C&lt;/td&gt;&lt;td&gt;0.0045&lt;/td&gt;&lt;td&gt;0.0235&lt;/td&gt;&lt;td&gt;0.2115&lt;/td&gt;&lt;td&gt;2.2315&lt;/td&gt;&lt;td&gt;23.4800&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;C++&lt;/td&gt;&lt;td&gt;0.0040&lt;/td&gt;&lt;td&gt;0.0245&lt;/td&gt;&lt;td&gt;0.2130&lt;/td&gt;&lt;td&gt;2.2295&lt;/td&gt;&lt;td&gt;23.4535&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Java&lt;/td&gt;&lt;td&gt;0.2550&lt;/td&gt;&lt;td&gt;0.3735&lt;/td&gt;&lt;td&gt;1.4050&lt;/td&gt;&lt;td&gt;9.9225&lt;/td&gt;&lt;td&gt;95.5925&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Python 3&lt;/td&gt;&lt;td&gt;0.0810&lt;/td&gt;&lt;td&gt;0.4890&lt;/td&gt;&lt;td&gt;5.6820&lt;/td&gt;&lt;td&gt;73.1470&lt;/td&gt;&lt;td&gt;989.4360&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PyPy2.2.1&lt;/td&gt;&lt;td&gt;0.1320&lt;/td&gt;&lt;td&gt;0.2240&lt;/td&gt;&lt;td&gt;1.5340&lt;/td&gt;&lt;td&gt;9.1640&lt;/td&gt;&lt;td&gt;94.2570&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;PHP&lt;/td&gt;&lt;td&gt;0.1210&lt;/td&gt;&lt;td&gt;0.6650&lt;/td&gt;&lt;td&gt;7.5990&lt;/td&gt;&lt;td&gt;96.5950&lt;/td&gt;&lt;td&gt;1198.0580&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Jython&lt;/td&gt;&lt;td&gt;2.3460&lt;/td&gt;&lt;td&gt;2.8450&lt;/td&gt;&lt;td&gt;9.5880&lt;/td&gt;&lt;td&gt;88.1560&lt;/td&gt;&lt;td&gt;1585.4810&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;A graph which shows the comparison of how long each language took to sort N number of ints, the three largest files are considered&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Graph comparing time taken to sort 100 million integers for 5 languages" src="static/images/lang_graph.png" /&gt;&lt;/p&gt;
&lt;p&gt;The results of this test agree with the general belief that interpreted languages tend to be far slower than compiled ones. C and C++ were almost the same, which could be partly because the same IO libraries were used for those languages. PyPy turned out to be practically 10 times faster than CPython, which was much more than I had expected. This could be because the jit compilation starts making a greater difference with a greater number of integers. Jython was the slowest out of all, which certainly not surprising since it is running Python code on top of the Java Virtual Machine. &lt;/p&gt;
&lt;p&gt;While this test showed interesting outcomes, it leaves many things to be improved. One of these is the heavy use of libraries for file I/O, this means that the test was also measuring the implementation of the libraries, which could have affected the results. For example if a file I/O library in Java was better written than the other ones, it could give that language a skewed advantage. Another issue with this test is that it only considers languages which have their syntax influenced by C, and have many major similarities. It would have been interesting to conduct the test while including languages, which are less similar to one another, for example some of the functional languages.&lt;/p&gt;
&lt;p&gt;If anything this little comparison shows how useful it is to have knowledge of the features of different programming languages. For example, Python is a language which is really pleasant to code in, and allows for elegant solutions, however it would not be a good idea to use it in performance-intensive applications. Knowing about differences like this between different programming languages will allow one to make sensible choices when having to implement a solution to some problem. After all the programming languages we have are just tools, which can be used to implement some solution that the programmer comes up with.&lt;/p&gt;
&lt;h4&gt;Footnotes&lt;/h4&gt;
&lt;p&gt;&lt;a id="thoare"&gt;1&lt;/a&gt;: &lt;a href="http://cs.stanford.edu/people/eroberts/courses/soco/projects/2008-09/tony-hoare/quicksort.html"&gt;http://cs.stanford.edu/people/eroberts/courses/soco/projects/2008-09/tony-hoare/quicksort.html&lt;/a&gt; &lt;a href="#thoare_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="mt"&gt;2&lt;/a&gt;: &lt;a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html"&gt;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html&lt;/a&gt; &lt;a href="#mt_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="c"&gt;3&lt;/a&gt;: My C implementation of Quicksort (compiled with gcc): &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/QsortC.c"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/QsortC.c&lt;/a&gt; &lt;a href="#c_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="cpp"&gt;4&lt;/a&gt;: My C++ Quicksort implementation (compiled with g++): &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.cc"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.cc&lt;/a&gt; &lt;a href="#cpp_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="java"&gt;5&lt;/a&gt;: My Java Quicksort implementation, complied and executed with jdk 7u51: &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.java"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.java&lt;/a&gt; &lt;a href="#java_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="py"&gt;6&lt;/a&gt;: My Python Quicksort implementation, the same source file was used for Python 3.3.4, PyPy, and Jython: &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.py"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.py&lt;/a&gt; &lt;a href="#py_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="php"&gt;7&lt;/a&gt;: My PHP Quicksort implementation: &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.php"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/cmplang/src/Qsort.php&lt;/a&gt; &lt;a href="#php_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="wiki"&gt;8&lt;/a&gt;:The pseudocode description of the algorithm that is implemented in my programs: &lt;a href="http://en.wikipedia.org/wiki/Quicksort#In-place_version"&gt;http://en.wikipedia.org/wiki/Quicksort#In-place_version&lt;/a&gt; &lt;a href="#wiki_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="mtjava"&gt;9&lt;/a&gt;: Java implementation of Mersenne Twister: &lt;a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/VERSIONS/JAVA/MTRandom.java"&gt;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/VERSIONS/JAVA/MTRandom.java&lt;/a&gt; &lt;a href="#mtjava_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="bashtime"&gt;10&lt;/a&gt;: The bash built-in time function was used, so not /usr/bin/time (GNU time) &lt;a href="#bashtime_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id="bashscript"&gt;11&lt;/a&gt;: The script used to run and time the programs: &lt;a href="https://github.com/Filip-Ter/QSortTest/blob/master/TestTime.sh"&gt;https://github.com/Filip-Ter/QSortTest/blob/master/TestTime.sh&lt;/a&gt; &lt;a href="#bashscript_back"&gt;&amp;#x21a9;&lt;/a&gt;&lt;/p&gt;</summary><category term="Quicksort"></category><category term="languages"></category><category term="speed"></category></entry><entry><title>The practical side of reproducibility</title><link href="http://eecs.io/the-practical-side-of-reproducibility.html" rel="alternate"></link><updated>2014-04-06T16:12:00+01:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-04-06:the-practical-side-of-reproducibility.html</id><summary type="html">&lt;p&gt;In the &lt;a class="reference external" href="http://eecs.io/software-in-your-reproducible-research.html"&gt;previous post&lt;/a&gt; I pointed out some
difficulties of developing a reproducible experiment. Over a weekend, I've
applied some of that ideas to &lt;a class="reference external" href="http://www.eecs.qmul.ac.uk/~dm303/cvsc14.html"&gt;my paper&lt;/a&gt; and would like to share my
experience.&lt;/p&gt;
&lt;p&gt;This is the second attempt of making this work reproducible. The first was done
by &lt;a class="reference external" href="http://docs.vagrantup.com/v2/boxes.html"&gt;Alexander Konovalov&lt;/a&gt;, &lt;a class="reference external" href="http://alexk.host.cs.st-andrews.ac.uk"&gt;Devasena Inupakutika&lt;/a&gt;, &lt;a class="reference external" href="http://www.software.ac.uk/about/people/devasena-inupakutika"&gt;Steve Crouch&lt;/a&gt; and me at
the &lt;a class="reference external" href="http://www.software.ac.uk/about/people/steve-crouch"&gt;Collaborations Workshop&lt;/a&gt;. Our aim was to reproduce an experiment and run
it in &lt;a class="reference external" href="http://azure.microsoft.com/"&gt;Microsoft Azure&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By that time I'd already had a &lt;a class="reference external" href="http://www.software.ac.uk/collaborations-workshop-2014-cw14-software-your-reproducible-research"&gt;Vagrant box&lt;/a&gt; that contained all the necessary
software. However, Fedora 20, the OS I used, is not supported by Azure, so we
had to use another OS.&lt;/p&gt;
&lt;p&gt;Finally, we managed to create a VM image and run the experiment in the cloud.
However, deployment took most of the time, because we had to install the system
dependencies manually. It was a messy list of development libraries and Python
3.3.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class="section" id="automating-things"&gt;
&lt;h2&gt;Automating things&lt;/h2&gt;
&lt;p&gt;We would spend much less time on deployment if we had an idea what packages we
needed to install. A declarative description of what packages had to be
installed would help us a lot. Luckily, &lt;a class="reference external" href="https://salt.readthedocs.org/en/latest/"&gt;salt&lt;/a&gt;,  which nicely &lt;a class="reference external" href="http://docs.vagrantup.com/v2/provisioning/salt.html"&gt;integrates with
Vagrant&lt;/a&gt;, allows to do exactly this.&lt;/p&gt;
&lt;p&gt;While vagrant abstracts away all the difficulty and diversity of virtualization
software, salt hides away the quirks of the guest OS. Salt describes the desired
OS configuration as a set of &lt;a class="reference external" href="http://salt.readthedocs.org/en/latest/topics/tutorials/starting_states.html"&gt;states&lt;/a&gt;. A state can be an installed package, a
file or &lt;a class="reference external" href="http://salt.readthedocs.org/en/v0.17.5/ref/states/all/index.html"&gt;almost anything else&lt;/a&gt;. In &lt;a class="reference external" href="https://bitbucket.org/dimazest/phd-buildout/src/722ad58af0e3b8a3987758204b9bc78f46395b30/Vagrantfile"&gt;my Vagrant setup&lt;/a&gt;, I got &lt;a class="reference external" href="https://bitbucket.org/dimazest/phd-buildout/src/722ad58af0e3b8a3987758204b9bc78f46395b30/salt/roots/salt/basic.sls"&gt;4 kinds of salt states&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="system-packages"&gt;
&lt;h3&gt;System packages&lt;/h3&gt;
&lt;p&gt;The first class of states describes what system packages have to be installed.
Here is the relevant part of the configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;atlas-sse3-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;blas-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;bzip2-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;czmq-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;freetype-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;gcc-c++&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;git&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;hdf5-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;htop&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;libpng-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;libyaml-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;lzo-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;mercurial&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-Cython&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-devel&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-matplotlib&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-numexpr&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-numpy&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-PyYAML&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-scikit-learn&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-scipy&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-setuptools&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-tables&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;python3-zmq&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;tmux&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="s1"&gt;&amp;#39;unzip&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;pkg&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;packages&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;pkg&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;:&lt;/span&gt;
&lt;span class="x"&gt;  pkg.installed&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because salt configuration files are &lt;a class="reference external" href="http://jinja.pocoo.org"&gt;Jinja&lt;/a&gt; templates, it is possible to avoid
unnecessary repetition and keep the configuration file clear.&lt;/p&gt;
&lt;div class="section" id="system-configuration"&gt;
&lt;h4&gt;System configuration&lt;/h4&gt;
&lt;p&gt;The second set of packages configures the system and leaves some hints on how to
run the experiments. The &lt;tt class="docutils literal"&gt;README&lt;/tt&gt; file lists the commands needed to be run to
execute experiments presented in the paper.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;bashrc&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.append&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/.bashrc&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;text&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;export LC_ALL=&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;/etc/motd&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.append&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;text&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p-Indicator"&gt;|&lt;/span&gt;
        &lt;span class="no"&gt;Dialogue act tagging.&lt;/span&gt;

        &lt;span class="no"&gt;This is an isolated environment to run dialogue act tagging experiments.&lt;/span&gt;
        &lt;span class="no"&gt;For more details, see http://www.eecs.qmul.ac.uk/~dm303/cvsc14.html&lt;/span&gt;

        &lt;span class="no"&gt;Check README for further instructions.&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;README&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.copy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/README&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/srv/home/README&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;force&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;tmux_conf&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.copy&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/.tmux.conf&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/srv/home/tmux.conf&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;force&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment"&gt;
&lt;h3&gt;Deployment&lt;/h3&gt;
&lt;p&gt;The deployment states retrieve the custom experiment software and deploy it. In
my setup I use buildout. By the way, the same buildout configuration is used for
development, which guarantees that it's up to date.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;tools&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;hg.latest&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;https://dimazest@bitbucket.org/dimazest/phd-buildout&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;target&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/tools&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;rev&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;tip&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;runas&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;vagrant&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;tools_buildout.cfg&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.symlink&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/tools/buildout.cfg&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;target&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/tools/_buildout.cfg&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;require&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;hg&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;tools&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;tools_buildout_bootstrap&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;cmd.run&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;python3.3 bootstrap.py&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cwd&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/tools&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;vagrant&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;unless&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;ls /home/vagrant/tools/bin/buildout&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;buildout&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;cmd.run&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;bin/buildout&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cwd&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/tools&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;vagrant&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;env&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
      &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;LC_ALL&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;en_US.UTF-8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="data"&gt;
&lt;h3&gt;Data&lt;/h3&gt;
&lt;p&gt;The experiments use several resources. &lt;a class="reference external" href="http://compprag.christopherpotts.net/swda.html"&gt;The Switchboard corpus&lt;/a&gt;, its typical
training and testing splits and the word vector spaces. All the data is acquired
and put to the right place by salt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;swda&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.managed&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/swda.zip&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;http://compprag.christopherpotts.net/code-data/swda.zip&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source_hash&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;sha512=fb24f4c5be4e69490535951237a41cd320fe53d7fb2782d3624b0bb99da7a4461ad1ee8bbfeb3e22e38e0b706ae377787d437eb9308d6d32bf16481f7dd1f228&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;swda_unzip&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;cmd.run&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;yes | unzip swda.zip&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;cwd&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;unless:&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;ls /home/vagrant/swda/&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;swda_train_split&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.managed&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/downloads/switchboard/ws97-train-convs.list.txt&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;http://www.eecs.qmul.ac.uk/~dm303/static/papers/cvsc14/ws97-train-convs.list.txt&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source_hash&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;sha512=d497e4152afc8e3792cfadd0c52ebafad85aea21b65efc5918189a90dfe4aed2604e3d2b6827343d49425b5985a8eb39a3a4729d1c45e572757b4cecb5341bc0&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;swda_test_split&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.managed&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/downloads/switchboard/ws97-test-convs.list.txt&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;http://www.eecs.qmul.ac.uk/~dm303/static/papers/cvsc14/ws97-test-convs.list.txt&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source_hash&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;sha512=cb7e53d3471e63d46b12608db0f2b372c99269a2b7cfa6a4e0997cd7e22d518d5e227a19a572b4de2ce0773434ca5e9ee82022cd88408592dfa16492e3fb0f03&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;nltk_data&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;cmd.run&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/tools/bin/fowler.corpora-py -c &amp;quot;import nltk; nltk.download(&amp;#39;all&amp;#39;)&amp;quot;&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;creates&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/nltk_data&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;user&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;vagrant&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;cvsc14_space_raw&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.managed&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/data/matrix_swda_c-google-100_3k.h5&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;http://www.eecs.qmul.ac.uk/~dm303/static/papers/cvsc14/matrix_swda_c-google-100_3k.h5&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source_hash&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;sha512=c15a9f2d7117305bbcb1b32123e62cfdf0861548d3dc6c2401fd23eeffcb7053c9aa51c16b3ec15236d9aa78385966f92fc5594d77c2ef1066915d20e80d29c4&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;cvsc14_space_tf_idf&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.managed&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/data/matrix_swda_c-google-100_3k_tf-idf-l2.h5&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;http://www.eecs.qmul.ac.uk/~dm303/static/papers/cvsc14/matrix_swda_c-google-100_3k_tf-idf-l2.h5&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source_hash&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;sha512=153572ed754674337a985a8c6ae140cdab73227e2ba74cddad03d13c9e797c32a164b3e917fca43d05bd0238e7a12dce5c5bd24c0f5aec53ed396c31408b023f&lt;/span&gt;

&lt;span class="l-Scalar-Plain"&gt;cvsc14_space_nmf&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;file.managed&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;name&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/home/vagrant/data/matrix_swda_c-google-100_3k_line_normalized_nmf1k.h5&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;http://www.eecs.qmul.ac.uk/~dm303/static/papers/cvsc14/matrix_swda_c-google-100_3k_line_normalized_nmf1k.h5&lt;/span&gt;
    &lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;source_hash&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;sha512=ca14e57e5ceed8073d259088644df6847a9c549b1bad61c9df8563da78ca7f1c239f29b6cbac04091aca90d8c135daff48b7eda8c22b48ffb0cf592f60df6eb5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a nice bonus, the checksums are checked to guarantee that you get the same
data as I.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="meta-experiment"&gt;
&lt;h2&gt;Meta experiment&lt;/h2&gt;
&lt;p&gt;Now, the experiment can be rerun in a few steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;hg clone https://bitbucket.org/dimazest/phd-buildout
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;phd-buildout
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant up  &lt;span class="c"&gt;# I had to wait for 48 minutes...&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant ssh
Last login: Sun Apr  6 14:29:55 2014
Dialogue act tagging.

This is an isolated environment to run dialogue act tagging experiments.
For more details, see http://www.eecs.qmul.ac.uk/~dm303/cvsc14.html

Check README &lt;span class="k"&gt;for &lt;/span&gt;further instructions.
&lt;span class="o"&gt;[&lt;/span&gt;vagrant@localhost ~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tools/bin/corpora serafin03 plain-lsa  &lt;span class="c"&gt;# A nice opportunity for my laptop&amp;#39;s fan to show it&amp;#39;s presence :)&lt;/span&gt;
:paper: Serafin et al. 2003
:accuracy: 0.617
:command: tools/bin/corpora serafin03 plain-lsa

&lt;span class="o"&gt;====================&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt;
                 tag  precision     recall   f1-score    &lt;span class="nv"&gt;support&lt;/span&gt;
&lt;span class="o"&gt;====================&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt;
                   %      0.515      0.694      0.592        360
                  ^2      0.190      0.211      0.200         19
                  ^h      0.200      0.143      0.167          7
                  ^q      0.000      0.000      0.000         17
                  aa      0.515      0.327      0.400        208
             aap&lt;span class="se"&gt;\_&lt;/span&gt;am      0.000      0.000      0.000          7
                  ad      0.143      0.037      0.059         27
                  ar      0.000      0.000      0.000          3
             arp&lt;span class="se"&gt;\_&lt;/span&gt;nd      0.000      0.000      0.000          3
                   b      0.764      0.916      0.834        765
                 b^m      0.000      0.000      0.000         21
                  ba      0.529      0.724      0.611         76
                  bd      1.000      1.000      1.000          1
                  bf      0.000      0.000      0.000         23
                  bh      0.480      0.571      0.522         21
                  bk      0.327      0.571      0.416         28
                  br      0.714      0.556      0.625          9
                  fa      0.500      0.500      0.500          2
                  &lt;span class="nb"&gt;fc      &lt;/span&gt;0.660      0.432      0.522         81
fo&lt;span class="se"&gt;\_&lt;/span&gt;o&lt;span class="se"&gt;\_&lt;/span&gt;fw&lt;span class="se"&gt;\_&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\_&lt;/span&gt;by&lt;span class="se"&gt;\_&lt;/span&gt;bc      0.250      0.062      0.100         16
                  fp      0.333      0.200      0.250          5
                  ft      0.000      0.000      0.000          7
                   h      0.667      0.609      0.636         23
                  na      0.000      0.000      0.000         10
                  ng      0.500      0.167      0.250          6
                  nn      0.479      0.885      0.622         26
                  no      0.000      0.000      0.000          6
                  ny      0.455      0.068      0.119         73
                  qh      0.250      0.083      0.125         12
                  qo      0.524      0.688      0.595         16
                 qrr      0.250      0.500      0.333          2
                  qw      0.594      0.345      0.437         55
                qw^d      0.000      0.000      0.000          1
                  qy      0.425      0.405      0.415         84
                qy^d      0.308      0.111      0.163         36
                  sd      0.620      0.790      0.695       1317
                  sv      0.568      0.255      0.352        718
                  t1      0.000      0.000      0.000          1
                   x      0.887      1.000      0.940         94
-------------------- ---------- ---------- ---------- ----------
  weighted avg/total      0.592      0.617      0.582       &lt;span class="nv"&gt;4186&lt;/span&gt;
&lt;span class="o"&gt;====================&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt; &lt;span class="o"&gt;==========&lt;/span&gt;

The model is trained on the full development set.
The scores are computed on the full evaluation set.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="future-work"&gt;
&lt;h2&gt;Future work&lt;/h2&gt;
&lt;p&gt;There are several ways to improve the setup.&lt;/p&gt;
&lt;p&gt;So far, I've used Fedora 20 as the guest OS. It's possible to configure salt to
&lt;a class="reference external" href="http://salt.readthedocs.org/en/v0.17.5/topics/tutorials/states_pt3.html#using-grains-in-sls-modules"&gt;perform different actions for different OS&lt;/a&gt;. For example, it would be nice to
have support for Ubuntu, or even &lt;a class="reference external" href="http://www.gentoo.org/proj/en/gentoo-alt/prefix/"&gt;Gentoo prefix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Adaptation to another provisioner, for example, &lt;a class="reference external" href="http://docs.vagrantup.com/v2/provisioning/docker.html"&gt;Docker&lt;/a&gt; to minimize isolation
overhead would be another great enhancement.&lt;/p&gt;
&lt;p&gt;Nicer data management, probably, using &lt;a class="reference external" href="http://dat-data.com"&gt;dat&lt;/a&gt; would keep the setup clearer.&lt;/p&gt;
&lt;p&gt;Finally, it would be nice to deploy the created virtual machine in a cloud and
run all the experiments there. The trick is that some experiments require quite
a lot of RAM and were originally run on a machine with 16 CPUs and 128 GB of
RAM.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="vagrant"></category><category term="salt"></category><category term="deployment"></category></entry><entry><title>Software in your reproducible research</title><link href="http://eecs.io/software-in-your-reproducible-research.html" rel="alternate"></link><updated>2014-03-28T17:22:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-03-28:software-in-your-reproducible-research.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://software.ac.uk/cw14"&gt;Collaborations Workshop 2014 (CW14)&lt;/a&gt; took place
in Oxford in the end of March. I was lucky to attend the last day of the meeting
dedicated to ad-hock hacking. I would characterize the main topic of the
workshop as introduction of qualitative software development in scientific
environment.  Here are my thoughts, why &lt;a class="reference external" href="https://twitter.com/dimazest/status/449484586717048832"&gt;reproducibility is a dream that easily
becomes a nightmare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I'll start by comparing scientists to professional programmers and operations
and argue that for an experiment to be reproducible the software has to be
reusable. Then, I'll give some suggestions on how to make a reproducible setup.&lt;/p&gt;
&lt;div class="section" id="scientists-are-developers"&gt;
&lt;h2&gt;Scientists are developers&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pydata.org/ldn2014/speakers/#168"&gt;Mark Basham&lt;/a&gt; at &lt;a class="reference external" href="http://pydata.org/ldn2014"&gt;PyData London&lt;/a&gt; stated, what I consider, the pain of researchers
in one sentence. Here is my free recall:&lt;/p&gt;
&lt;blockquote&gt;
Nowadays, scientists have to process so much data that they &lt;strong&gt;have to&lt;/strong&gt;
become programmers.&lt;/blockquote&gt;
&lt;p&gt;I completely agree with it. It's not possible anymore to successfully run an
experiment without using highly optimized libraries for computation, IO and
result representation.&lt;/p&gt;
&lt;p&gt;I would go even further and explain the growing popularity of Python and other
high level languages by the fact that they hide complex implementation behind
simple interfaces (see &lt;a class="reference external" href="http://scikit-learn.org/stable/"&gt;scikit-learn's&lt;/a&gt; &lt;a class="reference external" href="https://github.com/scikit-learn/scikit-learn/blob/6b38d3b3051b4be298d4df4978dc35b56d5eb3a6/sklearn/cross_validation.py"&gt;cross validation code&lt;/a&gt; for an
example).&lt;/p&gt;
&lt;p&gt;Therefore, readability and understandability of code plays an important role. To
the extent that it's very tempting to use the development version of a library
when the code is being written. For example, the user interface of &lt;a class="reference external" href="https://github.com/ipython/ipython/blob/0485089180ff70feac77bd01bf23a410a787d8e5/docs/source/whatsnew/development.rst"&gt;IPython
2&lt;/a&gt;, which is still under development at the moment of writing, improved a lot
in comparison to the current stable version. Quite often development versions
fix encountered bugs, which might be to small to deserve a dedicated release.&lt;/p&gt;
&lt;p&gt;In this mode a scientist behaves like a developer. The more recent is the
software the better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="scientists-are-not-operations"&gt;
&lt;h2&gt;Scientists are not operations&lt;/h2&gt;
&lt;p&gt;In a software company, eagerness of developers is usually compensated by wisdom
of operations, the people responsible for running and supporting software.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;operations:&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;/ɒpəˈreɪʃ(ə)ns/&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;noun&lt;/cite&gt;&lt;/p&gt;
&lt;ol class="last arabic simple"&gt;
&lt;li&gt;people who are responsible for deploying and monitoring
services in a company.&lt;/li&gt;
&lt;/ol&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;In academia, usually, there is much less interest to code. Not everyone is
interested to study how an experiment is implemented. The main deliverable from
a scientist-developer is a result that hopefully beats the current state of the
art. In addition, scientists-developers have a strong opinion on what tools to
use and prefer to reinvent a wheel, rather than reuse code written by other
scientists.&lt;/p&gt;
&lt;p&gt;The problem is that it's not easy to reuse code. It has to at least be
documented and well written. Both of the points require a lot of effort, which
might not be appreciated.&lt;/p&gt;
&lt;!-- Now it's a bit messy --&gt;
&lt;/div&gt;
&lt;div class="section" id="scientists-should-be-operations"&gt;
&lt;h2&gt;Scientists should be operations&lt;/h2&gt;
&lt;p&gt;Why should scientist care about the quality of their code? The main reason is
that eventually good code will be reused by someone else. Someone else could be
yet another person in a group, or in a group in another research center. Also,
having a widely adopted tool minimizes amount of surprises. For example, &lt;a class="reference external" href="https://github.com/nltk/nltk/blob/develop/nltk/corpus/reader/bnc.py"&gt;NLTK's
BNC reader&lt;/a&gt;, which takes care of &lt;a class="reference external" href="https://github.com/nltk/nltk/issues/70"&gt;some corner cases&lt;/a&gt;. (A note for a careful
reader: the amount of &lt;a class="reference external" href="https://twitter.com/dimazest/status/442723017958129664"&gt;regexp based code written to process XML&lt;/a&gt; is at least
10 times larger than you think.)&lt;/p&gt;
&lt;p&gt;The bad news is that even &lt;a class="reference external" href="http://maurits.vanrees.org/weblog/archive/2013/05/holger-krekel-re-inventing-python-packaging-testing"&gt;developers are still working on easy code reuse&lt;/a&gt;, aka
packaging, to make operations' live easier!&lt;/p&gt;
&lt;p&gt;Since scientists are already developers, they should learn from operations. This
means that the environment the code runs should be similar from the moment it's
being developed to the moment it's being deployed. This prevents bugs and
minimizes works-for-me situations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-good-project"&gt;
&lt;h2&gt;A good project&lt;/h2&gt;
&lt;p&gt;The documentation of a good project should include testing and deployment
instructions.&lt;/p&gt;
&lt;p&gt;The process should be automated as much as possible. &lt;a class="reference external" href="http://www.testrun.org/tox/"&gt;Tox&lt;/a&gt; is a tool that provides a unified interface to
run tests and hides differences across different test runners.&lt;/p&gt;
&lt;p&gt;In the Python world, usage of eggs and listing of the requirements in
&lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; and their versions in &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; makes deployment
easier, but solves only half of the problem: it takes care only of Python
dependencies and ignores system dependencies, such as libraries written in C.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt; is a great tool for virtual machine
management. It allows to use a completely isolated environment as if it was
local. For example, on my Mac I can start a vagrant box with CentOS 6.5 and have
the same environment as the computing server I'll use.&lt;/p&gt;
&lt;p&gt;Taking this into account, this should be necessary steps to run/develop
scientific software:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Get the Vagrant config&lt;/span&gt;
git/hg clone http://project-site.org/project
&lt;span class="nb"&gt;cd &lt;/span&gt;project

&lt;span class="c"&gt;# Start the virtual environment&lt;/span&gt;
vagrant up

&lt;span class="c"&gt;# Connect to it&lt;/span&gt;
vagrant ssh

&lt;span class="c"&gt;# All system dependencies are installed&lt;/span&gt;
cat README
Dialogue act tagging

The environment to run experiments described in Joe Doe. 2015. The Ultimate Dialogue act tagging.

Refer to http://project-site.org/ &lt;span class="k"&gt;for &lt;/span&gt;more information.

The experiment data is stored data/. To &lt;span class="nb"&gt;test &lt;/span&gt;the setup run:

    tox

To run the experiment &lt;span class="nb"&gt;type&lt;/span&gt;:

    bin/tagger doe2015

&lt;span class="c"&gt;# Now I know what to do and happily run the experiment&lt;/span&gt;
bin/tagger doe2015
Tagging accuracy is 100%.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this fancy and clear setup requires loads of love and care. A virtual
machine image has to be built and hosted somewhere. It has to be updated from
time to time. This is why reproducibility can easily become a nightmare.&lt;/p&gt;
&lt;p&gt;On other hand, having a virtual machine image it can be deployed in a cloud on a
powerful machine in the matter of minutes.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="cw14"></category><category term="programming"></category><category term="reproducibility"></category></entry><entry><title>Anonymity</title><link href="http://eecs.io/anonymity.html" rel="alternate"></link><updated>2014-03-27T18:00:00+00:00</updated><author><name>Anish Patel</name></author><id>tag:eecs.io,2014-03-27:anonymity.html</id><summary type="html">&lt;p&gt;As the world makes a shift online, from our daily habits increasing our reliance
on the internet here is an interesting topic that comes up, the aspect of online
anonymity. Anonymous apps such as Whisper and Secret have made us aware of the
issues we face in the modern world, reigniting the debate as to whether
anonynmity outweights the risk it comes with.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;This is an important topic beyond tech, a question of how humans should treat one
another: Can we improve ourselves? Do we want to? Do we have a moral obligation
to do so? People in tech are outstanding at building, but at moderating? There
we don’t have much of a track record. Even the likes of Facebook have not been
able to control that and make favourable decisions most of the time.&lt;/p&gt;
&lt;p&gt;People are people, and will exhibit bad behaviour almost anywhere so it's more
of an individual choice. We have soldiers in Afghanistan, who might not have
proper resources to get the emotional support they need during combat. This
platform act as a medium to express feelings. Anonymity facilitates the
feeling of &amp;quot;I'm not the only one out there...&amp;quot;.&lt;/p&gt;
&lt;p&gt;Like any other platform there are bound to be issues which we have no control
over, such systems will always get users. But to what end, and at what cost.
Sometimes it depends individually such that our personality defines who we
really are and what we end up doing.&lt;/p&gt;
&lt;p&gt;We all have a story to share, and most of the times we learn from our mistakes
but I believe we can learn from other people's mistakes too.&lt;/p&gt;
&lt;p&gt;The facts are laid out but I think it's all about making the right choice by
figuring out if the positive aspects of this ideas outweigh the negative.&lt;/p&gt;
&lt;p&gt;For those who'd like to give it a try, you can visit &lt;a class="reference external" href="https://www.secret.ly"&gt;Secret&lt;/a&gt;
or &lt;a class="reference external" href="http://whisper.sh"&gt;Whisper&lt;/a&gt; to get a better understanding.&lt;/p&gt;
</summary><category term="apps"></category><category term="anonymity"></category></entry><entry><title>Basic git configuration</title><link href="http://eecs.io/basic-git-configuration.html" rel="alternate"></link><updated>2014-03-04T17:50:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-03-04:basic-git-configuration.html</id><summary type="html">&lt;p&gt;Git is a powerful tool, though it has to be configured first.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Here is a basic &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.gitconfig&lt;/span&gt;&lt;/tt&gt; file that sets you name, sets up aliases and
enables highlighting in git output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[user]&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Dmitrijs Milajevs&lt;/span&gt;
&lt;span class="s"&gt;    email = dimazest@gmail.com&lt;/span&gt;
&lt;span class="k"&gt;[color]&lt;/span&gt;
    &lt;span class="na"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;auto&lt;/span&gt;
&lt;span class="s"&gt;    status = auto&lt;/span&gt;
&lt;span class="s"&gt;    branch = auto&lt;/span&gt;
&lt;span class="s"&gt;    ui = auto&lt;/span&gt;
&lt;span class="s"&gt;    decorate = short&lt;/span&gt;
&lt;span class="k"&gt;[alias]&lt;/span&gt;
    &lt;span class="na"&gt;st&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;status&lt;/span&gt;
&lt;span class="s"&gt;    ci = commit&lt;/span&gt;
&lt;span class="s"&gt;    br = branch&lt;/span&gt;
&lt;span class="s"&gt;    co = checkout&lt;/span&gt;
&lt;span class="s"&gt;    unstage = reset HEAD --&lt;/span&gt;
&lt;span class="s"&gt;    last = log -1 HEAD&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can type &lt;tt class="docutils literal"&gt;git st&lt;/tt&gt; instead of &lt;tt class="docutils literal"&gt;git status&lt;/tt&gt;.&lt;/p&gt;
</summary><category term="git"></category></entry><entry><title>A small Markdown introduction</title><link href="http://eecs.io/a-small-markdown-introduction.html" rel="alternate"></link><updated>2014-03-04T00:00:00+00:00</updated><author><name>Henrik O. Skogmo</name></author><id>tag:eecs.io,2014-03-04:a-small-markdown-introduction.html</id><summary type="html">&lt;p&gt;Giving writers a WYSIWYG makes the assumption that they know how to make stuff
look good. This is wrong. People who work with words should only have to care
about words. Leaving the design choices to the designers. Markdown does an
excellent job in accomplishing this compromise.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Many of the web's most populare publishing tools are now supporting Markdown.
And you might recognise it from Stack Overflow and GitHub. So maybe it's time
you get down with the M-down?&lt;/p&gt;
&lt;p&gt;How the hell do you harvest the sweet markdown nectar? Easy. Kick-start your
favourite (plain)text editor and fire away. Since Markdown is a lightweight
markup language, all of you oldschool BBCode forum writers out there will find
yourselves quite confortable.&lt;/p&gt;
&lt;p&gt;Even though you can find the reference to &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown's
syntax&lt;/a&gt; online, I'll walk
you through some of the basics. Do note that there is alternatives for some of
the elements, so I encourouge you to gaze over the documenation.&lt;/p&gt;
&lt;h2&gt;Headers&lt;/h2&gt;
&lt;p&gt;Use hashtags to mark the level of a header.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# This is an H1&lt;/span&gt;
&lt;span class="c"&gt;## This is an H2&lt;/span&gt;
&lt;span class="c"&gt;### This is an H3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Emphasis&lt;/h2&gt;
&lt;p&gt;Asterisks or underlines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;quick&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;brown&lt;/span&gt; &lt;span class="n"&gt;fox&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;jumps&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;lazy&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Becomes "The quick &lt;em&gt;brown fox&lt;/em&gt; jumps over the &lt;strong&gt;lazy dog&lt;/strong&gt;"&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;There are multiple ways of making links in MD, either inline or by reference.
However here is the most used way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.com &amp;quot;Title&amp;quot;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Lists&lt;/h2&gt;
&lt;p&gt;Simply use something that looks listy (*, + or -).&lt;/p&gt;
&lt;h3&gt;Unordered&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Red&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Green&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Blue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Becomes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ordered&lt;/h3&gt;
&lt;p&gt;(What the numbers are does't matter)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="n"&gt;Red&lt;/span&gt;
&lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="n"&gt;Green&lt;/span&gt;
&lt;span class="mf"&gt;4.&lt;/span&gt; &lt;span class="n"&gt;Blue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Becomes&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Red&lt;/li&gt;
&lt;li&gt;Green&lt;/li&gt;
&lt;li&gt;Blue&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;h3&gt;Inline&lt;/h3&gt;
&lt;p&gt;Use the backtick quotes (`) for &lt;code&gt;inline code&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Block&lt;/h3&gt;
&lt;p&gt;4 spaces or 1 tab indention&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;HAI&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;
  &lt;span class="n"&gt;CAN&lt;/span&gt; &lt;span class="n"&gt;HAS&lt;/span&gt; &lt;span class="n"&gt;STDIO&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
  &lt;span class="n"&gt;VISIBLE&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;HAI WORLD!!!1!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;KTHXBYE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you would like to start using Markdown locally on your own system I have a
couple of Markdown readers to recommend. Even though you don't strickly need
anything fancy to write Markdown, you still need something to parse it.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://mouapp.com/"&gt;Mou&lt;/a&gt; for Mac
&lt;a href="http://markdownpad.com/"&gt;MarkdownPad&lt;/a&gt; for Windowns
&lt;a href="http://sourceforge.net/p/retext/home/ReText/"&gt;ReText&lt;/a&gt; for Linux&lt;/p&gt;</summary><category term="markdown"></category><category term="markup"></category><category term="languages"></category></entry><entry><title>Approximating Randomness</title><link href="http://eecs.io/approximating-randomness.html" rel="alternate"></link><updated>2014-03-03T18:00:00+00:00</updated><author><name>Filip Ter</name></author><id>tag:eecs.io,2014-03-03:approximating-randomness.html</id><summary type="html">&lt;p&gt;Generating random numbers from computers is essential to the development
of certain kinds of software. Anything from modelling the environment, to a
lottery machine, to determining the value of loot in a chest in an RPG, will
require random number generation. At first it may seem strange that computers,
which are capable of producing massive amounts of digits in a short time,
would not be able to produce random numbers. The difficulty is that the
computers we use, are constructed specifically to follow logical steps
deterministically, so to generate numbers that are truly random from a system
like our computers is virtually impossible. True randomness cannot be obtained
using arithmetic operations, which is exactly what our computers perform. When
some sequence of numbers is random then it is not possible to predict what the
next digit will be, and since computers use a set of logical steps to create
any new number it is theoretically possible to predict it. Nonetheless
programmers take advantage of features for creating random numbers all the
time, the most widely used programming languages, provide libraries that can
generate 'random' values. Any role-playing game for example, that you might
use, needs random values to determine the number of gold you'll find from some
locations, what items dead enemies will drop, etc. So how is it possible that
even though the very nature of computers makes it impossible to exhibit random
behaviour, that many programs include simulations of randomness?&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;The answer is pseudo-random number generators(PRNG), these are programs that
follow a certain algorithm to simulate random behaviour. The numbers they
generate, cannot be by definition truly random, however for many uses it is a
good enough approximation. The libraries in many of todays programming
languages that generate random digits use PRNG's. The basic idea is to perform
some arithmetic operations on a number in sequence, to make it seem like it's
random. A PRNG always starts with an initial value called a seed. It will then
perform operations on the seed to make the final number different from the
original value. So when the PRNG is supplied with seeds that are in sequence,
it will return numbers that seem random, because the operations that are
performed on each number should change it to make it so the returned numbers
are no longer following any pattern. PRNG's are also periodical, they have a certain
amount of numbers they produce, and after that the sequence starts to repeat
itself. It is usually not a problem to make the period very large, so that the
application that relies on it will never start to get repeated sequences.&lt;/p&gt;
&lt;p&gt;A very well known PRNG is the Mersenne Twister(1), it is the default PRNG for
Python, Ruby, PHP and many others. It has a period of 2^(19937−1), which is a
Mersenne prime number, hence the name of the generator. Invented in 1997 it
was largely superior to PRNG's like C's rand or Java's Random. Furthermore it
passes certain statistical tests for randomness so it is a very reliable
generator as it is very successful at simulating genuine randomness.&lt;/p&gt;
&lt;p&gt;These programs have been used extensively and are relied upon by many applications,
it is important to note that when truly random behaviour is needed then PRNG's
are not sufficient. John von Neumann famously said: “Anyone who considers
arithmetical methods of producing random digits is, of course, in a state of
sin.&amp;quot; In this situation he was referring to depending on PRNG's or other
arithmetic approaches to create truly random digits, which is not a good idea.
Rather it is possible to use true random number generators, that are based on
the idea of extracting physical phenomena that are believed to be random and
using them to generate random numbers. For example atmospheric noise, or
radioactive decay, etc. Even though it is possible to extract truly random
numbers from the outside world, most applications that use random numbers use
PRNG's. It is because of their convenience, there is no need for any extra
devices, or input, all it needs is a sequence of numbers that it later
transforms into a pseudo-random sequence.&lt;/p&gt;
&lt;p&gt;1: Link to the implementation of Mersenne Twister. This is the latest version from the original creators:
&lt;a class="reference external" href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c"&gt;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c&lt;/a&gt;&lt;/p&gt;
</summary><category term="random"></category><category term="prng"></category><category term="languages"></category></entry><entry><title>Facebook Hackathon</title><link href="http://eecs.io/facebook-hackathon.html" rel="alternate"></link><updated>2014-02-28T19:32:00+00:00</updated><author><name>Umar Qureshi</name></author><id>tag:eecs.io,2014-02-28:facebook-hackathon.html</id><summary type="html">&lt;p&gt;If you havent heard yet, Facebook will be hosting a Hackathon on Saturday, 15
March 2014. A Hackathon is a (codefest) event where computer programmers and
others involved in software development, graphic designers, interface
designers and project managers collaborate intensively on software
projects.Hackathons tend to have a specific focus, which can include the
programming language used, the operating, an application, an API, or the
subject and the demographic group of the programmer. Though for the Facebook
hackthon, there isnt any restriction on what you can make so aim for the sky.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;So Join Facebook in London as we stay up all night hacking, learning and
having a some fun! Start brainstorming ideas &amp;amp; forming teams (of up to 4
people). Facebook will suply us with  food, fun diversions, prizes, and some
expert guidance in the form of our engineers. Travel will be reimbursed for
public transportation.You bring your laptop, appetite, skills and ideas.&lt;/p&gt;
&lt;p&gt;The winning team will get the chance to compete against teams from other
Hackathons both domestically and internationally at the Hackathon Finals and
be judged by Facebook executives -- held at Facebook HQ in Menlo Park,
California in November!&lt;/p&gt;
&lt;p&gt;Here is a link for registration
&lt;a class="reference external" href="https://www.surveymonkey.com/s/londonhackathon"&gt;https://www.surveymonkey.com/s/londonhackathon&lt;/a&gt;. Register before the 4th of
March. The event is over subscribed but you can still apply. Be ready for a
coding puzzle on the 4th of March, this will be your ticket to the event.&lt;/p&gt;
</summary><category term="Facebook"></category></entry><entry><title>Middlesex Algorithms Day</title><link href="http://eecs.io/middlesex-algorithms-day.html" rel="alternate"></link><updated>2014-02-26T12:02:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-02-26:middlesex-algorithms-day.html</id><summary type="html">&lt;p&gt;Middlesex University organizes an &lt;a class="reference external" href="http://www.cs.mdx.ac.uk/foundations/middlesex-algorithms-day-mad-2014/"&gt;Algorithms Day&lt;/a&gt; in
the Hendon Town Hall, on Friday the 14th of March. Also, the solutions and
pictures from the EECS programming competitions are &lt;a class="reference external" href="http://www.eecs.qmul.ac.uk/~pbo/competition/2014/"&gt;published&lt;/a&gt;.&lt;/p&gt;
</summary><category term="algorithms"></category></entry><entry><title>Pyclub Twitter account</title><link href="http://eecs.io/pyclub-twitter-account.html" rel="alternate"></link><updated>2014-02-25T16:47:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-02-25:pyclub-twitter-account.html</id><summary type="html">&lt;p&gt;I'm happy to announce that we have a Twitter account. Follow &lt;a class="reference external" href="https://twitter.com/pyclub_qm"&gt;&amp;#64;pyclub_qm&lt;/a&gt;.&lt;/p&gt;
</summary><category term="twitter"></category></entry><entry><title>Pydata</title><link href="http://eecs.io/pydata.html" rel="alternate"></link><updated>2014-02-22T10:21:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-02-22:pydata.html</id><summary type="html">&lt;p&gt;The Pydata conference has started and the venue has a great view to East
London. If you look carefully, you can spot Queen Mary.&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://eecs.io/static/images/pydata-qmul-large.jpg"&gt;&lt;img alt="East London" class="align-center" src="http://eecs.io/static/images/pydata-qmul.jpg" /&gt;&lt;/a&gt;
</summary><category term="pydata"></category></entry><entry><title>GSOC project: MoinMoin</title><link href="http://eecs.io/gsoc-project-moinmoin.html" rel="alternate"></link><updated>2014-02-10T11:17:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-02-10:gsoc-project-moinmoin.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://moinmo.in/"&gt;MoinMoin&lt;/a&gt;, a wiki engine, published &lt;a class="reference external" href="https://moinmo.in/GoogleSoc2014/InitialProjectIdeas"&gt;initial project ideas&lt;/a&gt; for the &lt;a class="reference external" href="http://www.google-melange.com/gsoc/homepage/google/gsoc2014"&gt;Google
Summer of Code 2014&lt;/a&gt;. MoinMoin is a mature project with a wonderful core team.
They participated in GSOC for many years.&lt;/p&gt;
</summary><category term="gsoc"></category></entry><entry><title>QCon London</title><link href="http://eecs.io/qcon-london.html" rel="alternate"></link><updated>2014-01-31T17:42:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-01-31:qcon-london.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://qconlondon.com/"&gt;QCon London&lt;/a&gt; is looking for students to volunteer.
Get more details and fill in the application form &lt;a class="reference external" href="http://qconlondon.com/london-2014/crew/"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="conference"></category><category term="scholarship"></category></entry><entry><title>PyData, Europython and Google</title><link href="http://eecs.io/pydata-europython-and-google.html" rel="alternate"></link><updated>2014-01-29T09:03:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-01-29:pydata-europython-and-google.html</id><summary type="html">&lt;p&gt;There are several events on the radar that not only give you loads of
knowledge, but also give you some money.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div class="section" id="pydata-in-london"&gt;
&lt;h2&gt;PyData in London&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pydata.org/ldn2014"&gt;PyData&lt;/a&gt; is a conference dedicated to the scientific tools in Python. London is
the first city outside the U.S. that hosts the conference on February 21 - 23.&lt;/p&gt;
&lt;p&gt;This time several &lt;a class="reference external" href="http://pydata.org/ldn2014/news/"&gt;diversity scholarships&lt;/a&gt; are offered. Here is the
announcement from the conference page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One of the goals of PyData is to increase awareness and excitement around
opportunities for women and underrepresented groups in software engineering.
To increase diversity in scientific computing, our outreach programmes range
from hosting workshops to introduce programming to young women, to encouraging
diversity in speakers.&lt;/p&gt;
&lt;p&gt;For PyData London 2014, we are offering scholarship opportunities to women and
those from other underrepresented groups who may otherwise be unable to attend
the conference. Generous donations from the Python Software Foundation and
NumFocus have made these efforts possible.&lt;/p&gt;
&lt;p&gt;To apply for a scholarship, please fill out our &lt;a class="reference external" href="https://docs.google.com/forms/d/1Ke-RVO09nDgZBls6zt0PDpNLRGczykRB-cRTwrRReqk/viewform"&gt;application&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Go ahead and drop several lines!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="europython-in-berlin"&gt;
&lt;h2&gt;Europython in Berlin&lt;/h2&gt;
&lt;p&gt;Europython is a largest Python related event in Europe. It's usually running
for a week. This year the conference will be in Berlin, Germany, on July 21 -
27.&lt;/p&gt;
&lt;p&gt;It is possible to get early bit tickets with a student discount, you just need
to &lt;a class="reference external" href="http://blog.europython.eu/post/74824001195/the-early-bird-ticket-sale-will-start-soon-special"&gt;send your student ID&lt;/a&gt;. Grants should be announced soon, so read their
&lt;a class="reference external" href="http://blog.europython.eu"&gt;blog&lt;/a&gt; or follow &lt;a class="reference external" href="https://twitter.com/europython"&gt;&amp;#64;europython&lt;/a&gt;. See you in Berlin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="google-summer-of-code-worldwide"&gt;
&lt;h2&gt;Google Summer of Code worldwide&lt;/h2&gt;
&lt;p&gt;In case you didn't hear about &lt;a class="reference external" href="http://www.google-melange.com/gsoc/document/show/gsoc_program/google/gsoc2014/about_page"&gt;Google Summer of Code&lt;/a&gt;, it is something like
a software engineering project, but first, you do something useful, second,
you get a lot of support from professional developers (so you are not alone
trying to configure SVN and NetBeans), and you get paid.&lt;/p&gt;
&lt;p&gt;So far the program is in early stage, the list of accepted projects &lt;a class="reference external" href="http://www.google-melange.com/gsoc/events/google/gsoc2014"&gt;will be
published on February 24&lt;/a&gt;. However, it's a good idea to go trough the
&lt;a class="reference external" href="http://www.google-melange.com/gsoc/projects/list/google/gsoc2013"&gt;project list of 2013&lt;/a&gt; to get an idea of possible projects and good
applications.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="conference"></category><category term="scholarship"></category></entry><entry><title>Welcome to the QM Python club</title><link href="http://eecs.io/welcome.html" rel="alternate"></link><updated>2014-01-28T19:49:00+00:00</updated><author><name>Dmitrijs Milajevs</name></author><id>tag:eecs.io,2014-01-28:welcome.html</id><summary type="html">&lt;p&gt;Follow the &lt;a class="reference external" href="https://github.com/pyclub/pyclub.github.io/blob/pelican/README.rst"&gt;instructions&lt;/a&gt; if you
want to add an article.&lt;/p&gt;
</summary><category term="thats"></category><category term="awesome"></category></entry></feed>